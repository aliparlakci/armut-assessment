// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliparlakci/armut-backend-assessment/services (interfaces: ActivityLogger,ActivityFetcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aliparlakci/armut-backend-assessment/models"
	gomock "github.com/golang/mock/gomock"
)

// MockActivityLogger is a mock of ActivityLogger interface.
type MockActivityLogger struct {
	ctrl     *gomock.Controller
	recorder *MockActivityLoggerMockRecorder
}

// MockActivityLoggerMockRecorder is the mock recorder for MockActivityLogger.
type MockActivityLoggerMockRecorder struct {
	mock *MockActivityLogger
}

// NewMockActivityLogger creates a new mock instance.
func NewMockActivityLogger(ctrl *gomock.Controller) *MockActivityLogger {
	mock := &MockActivityLogger{ctrl: ctrl}
	mock.recorder = &MockActivityLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityLogger) EXPECT() *MockActivityLoggerMockRecorder {
	return m.recorder
}

// LogSignin mocks base method.
func (m *MockActivityLogger) LogSignin(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSignin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogSignin indicates an expected call of LogSignin.
func (mr *MockActivityLoggerMockRecorder) LogSignin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSignin", reflect.TypeOf((*MockActivityLogger)(nil).LogSignin), arg0, arg1, arg2)
}

// LogSignout mocks base method.
func (m *MockActivityLogger) LogSignout(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSignout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogSignout indicates an expected call of LogSignout.
func (mr *MockActivityLoggerMockRecorder) LogSignout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSignout", reflect.TypeOf((*MockActivityLogger)(nil).LogSignout), arg0, arg1, arg2)
}

// LogUnsuccesfulSignin mocks base method.
func (m *MockActivityLogger) LogUnsuccesfulSignin(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogUnsuccesfulSignin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogUnsuccesfulSignin indicates an expected call of LogUnsuccesfulSignin.
func (mr *MockActivityLoggerMockRecorder) LogUnsuccesfulSignin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUnsuccesfulSignin", reflect.TypeOf((*MockActivityLogger)(nil).LogUnsuccesfulSignin), arg0, arg1, arg2)
}

// MockActivityFetcher is a mock of ActivityFetcher interface.
type MockActivityFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockActivityFetcherMockRecorder
}

// MockActivityFetcherMockRecorder is the mock recorder for MockActivityFetcher.
type MockActivityFetcherMockRecorder struct {
	mock *MockActivityFetcher
}

// NewMockActivityFetcher creates a new mock instance.
func NewMockActivityFetcher(ctrl *gomock.Controller) *MockActivityFetcher {
	mock := &MockActivityFetcher{ctrl: ctrl}
	mock.recorder = &MockActivityFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityFetcher) EXPECT() *MockActivityFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockActivityFetcher) Fetch(arg0 context.Context, arg1 string) ([]models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].([]models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockActivityFetcherMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockActivityFetcher)(nil).Fetch), arg0, arg1)
}
