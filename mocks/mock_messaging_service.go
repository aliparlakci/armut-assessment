// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliparlakci/armut-backend-assessment/services (interfaces: MessageSender,MessageReader,MessageGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aliparlakci/armut-backend-assessment/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), arg0, arg1, arg2, arg3)
}

// MockMessageReader is a mock of MessageReader interface.
type MockMessageReader struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReaderMockRecorder
}

// MockMessageReaderMockRecorder is the mock recorder for MockMessageReader.
type MockMessageReaderMockRecorder struct {
	mock *MockMessageReader
}

// NewMockMessageReader creates a new mock instance.
func NewMockMessageReader(ctrl *gomock.Controller) *MockMessageReader {
	mock := &MockMessageReader{ctrl: ctrl}
	mock.recorder = &MockMessageReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageReader) EXPECT() *MockMessageReaderMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method.
func (m *MockMessageReader) ReadMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockMessageReaderMockRecorder) ReadMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockMessageReader)(nil).ReadMessage), arg0)
}

// MockMessageGetter is a mock of MessageGetter interface.
type MockMessageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMessageGetterMockRecorder
}

// MockMessageGetterMockRecorder is the mock recorder for MockMessageGetter.
type MockMessageGetterMockRecorder struct {
	mock *MockMessageGetter
}

// NewMockMessageGetter creates a new mock instance.
func NewMockMessageGetter(ctrl *gomock.Controller) *MockMessageGetter {
	mock := &MockMessageGetter{ctrl: ctrl}
	mock.recorder = &MockMessageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageGetter) EXPECT() *MockMessageGetterMockRecorder {
	return m.recorder
}

// CheckNewMessages mocks base method.
func (m *MockMessageGetter) CheckNewMessages(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNewMessages", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNewMessages indicates an expected call of CheckNewMessages.
func (mr *MockMessageGetterMockRecorder) CheckNewMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNewMessages", reflect.TypeOf((*MockMessageGetter)(nil).CheckNewMessages), arg0, arg1)
}

// GetAllMessages mocks base method.
func (m *MockMessageGetter) GetAllMessages(arg0 context.Context, arg1 string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages", arg0, arg1)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages.
func (mr *MockMessageGetterMockRecorder) GetAllMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockMessageGetter)(nil).GetAllMessages), arg0, arg1)
}

// GetNewMessages mocks base method.
func (m *MockMessageGetter) GetNewMessages(arg0 context.Context, arg1 string) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewMessages", arg0, arg1)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewMessages indicates an expected call of GetNewMessages.
func (mr *MockMessageGetterMockRecorder) GetNewMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewMessages", reflect.TypeOf((*MockMessageGetter)(nil).GetNewMessages), arg0, arg1)
}
